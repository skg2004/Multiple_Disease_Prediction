# -*- coding: utf-8 -*-
"""Kidney_disease_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12n-mKYo0wRuHaiBeFqAQaE3fGmeTI_3v
"""

import numpy as np
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score 
import matplotlib.pyplot as plt
import pickle

df=pd.read_csv("tri_zip/tri/kidney_disease.csv")
df.head()

df.shape

df.isnull().sum()

df.describe()

df['classification'] = df['classification'].replace(['ckd'], 1)
df['classification'] = df['classification'].replace(['notckd'], 0)
df = df.replace(['yes','no','normal','abnormal','present','notpresent','good','poor','ckd\t'], [1,0,1,0,1,0,1,0,1])

x=df.drop(columns='classification',axis=1)
y=df['classification']

print(x)

print(y)

df.drop('id',axis=1,inplace=True)
df.head()

df2 = df.dropna(axis=0)
df['classification'].value_counts()

"""SPLIT DATA"""

x_train,x_test,y_train,y_test=train_test_split(df2.iloc[:,:-1], df2['classification'], 
                                                    test_size = 0.33, random_state=44,
                                                   stratify= df2['classification'])

print(x_train.shape,x_test.shape)

"""KNN ALGORITHM"""

knn = KNeighborsClassifier(n_neighbors=5)

knn.fit(x_train, y_train)

y_pred=knn.predict(x_test)

print(accuracy_score(y_test,y_pred))

neighbors = np.arange(1, 9)
train_accuracy = np.empty(len(neighbors))
test_accuracy = np.empty(len(neighbors))

for i, k in enumerate(neighbors):
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(x_train, y_train)
      
    # Compute training and test data accuracy
    train_accuracy[i] = knn.score(x_train, y_train)
    test_accuracy[i] = knn.score(x_test, y_test)

plt.plot(neighbors, test_accuracy, label = 'Testing dataset Accuracy')
plt.plot(neighbors, train_accuracy, label = 'Training dataset Accuracy')
  
plt.legend()
plt.xlabel('n_neighbors')
plt.ylabel('Accuracy')
plt.show()

pickle.dump(knn,open("model1.pkl","wb"))